// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace AMI.MVC.WebApp.Controllers
{
    public partial class SLOController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected SLOController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddOutcomeToSLO()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutcomeToSLO);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RemoveOutcomeFromSLO()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveOutcomeFromSLO);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public SLOController Actions { get { return MVC5.SLO; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "SLO";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "SLO";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Edit = "Edit";
            public readonly string AddOutcomeToSLO = "AddOutcomeToSLO";
            public readonly string RemoveOutcomeFromSLO = "RemoveOutcomeFromSLO";
            public readonly string Delete = "Delete";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Edit = "Edit";
            public const string AddOutcomeToSLO = "AddOutcomeToSLO";
            public const string RemoveOutcomeFromSLO = "RemoveOutcomeFromSLO";
            public const string Delete = "Delete";
        }


        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string ClassID = "ClassID";
            public readonly string SLOID = "SLOID";
            public readonly string slo = "slo";
        }
        static readonly ActionParamsClass_AddOutcomeToSLO s_params_AddOutcomeToSLO = new ActionParamsClass_AddOutcomeToSLO();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddOutcomeToSLO AddOutcomeToSLOParams { get { return s_params_AddOutcomeToSLO; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddOutcomeToSLO
        {
            public readonly string sloID = "sloID";
            public readonly string outcomeID = "outcomeID";
        }
        static readonly ActionParamsClass_RemoveOutcomeFromSLO s_params_RemoveOutcomeFromSLO = new ActionParamsClass_RemoveOutcomeFromSLO();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RemoveOutcomeFromSLO RemoveOutcomeFromSLOParams { get { return s_params_RemoveOutcomeFromSLO; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RemoveOutcomeFromSLO
        {
            public readonly string sloID = "sloID";
            public readonly string ocID = "ocID";
        }
        static readonly ActionParamsClass_Delete s_params_Delete = new ActionParamsClass_Delete();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Delete DeleteParams { get { return s_params_Delete; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Delete
        {
            public readonly string classID = "classID";
            public readonly string SLOid = "SLOid";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string AddOutcomeToSLO = "AddOutcomeToSLO";
                public readonly string Edit = "Edit";
            }
            public readonly string AddOutcomeToSLO = "~/Views/SLO/AddOutcomeToSLO.cshtml";
            public readonly string Edit = "~/Views/SLO/Edit.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_SLOController : AMI.MVC.WebApp.Controllers.SLOController
    {
        public T4MVC_SLOController() : base(Dummy.Instance) { }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int ClassID, int SLOID);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(int ClassID, int SLOID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ClassID", ClassID);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SLOID", SLOID);
            EditOverride(callInfo, ClassID, SLOID);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, AMI.MVC.WebApp.Models.SLO.SLOModel slo);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Edit(AMI.MVC.WebApp.Models.SLO.SLOModel slo)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "slo", slo);
            EditOverride(callInfo, slo);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddOutcomeToSLOOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int sloID);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddOutcomeToSLO(int sloID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutcomeToSLO);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sloID", sloID);
            AddOutcomeToSLOOverride(callInfo, sloID);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void RemoveOutcomeFromSLOOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int sloID, int ocID);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> RemoveOutcomeFromSLO(int sloID, int ocID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.RemoveOutcomeFromSLO);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sloID", sloID);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "ocID", ocID);
            RemoveOutcomeFromSLOOverride(callInfo, sloID, ocID);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void AddOutcomeToSLOOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int sloID, int outcomeID);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> AddOutcomeToSLO(int sloID, int outcomeID)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.AddOutcomeToSLO);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "sloID", sloID);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "outcomeID", outcomeID);
            AddOutcomeToSLOOverride(callInfo, sloID, outcomeID);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

        [NonAction]
        partial void DeleteOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, int classID, int SLOid);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Delete(int classID, int SLOid)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Delete);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "classID", classID);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "SLOid", SLOid);
            DeleteOverride(callInfo, classID, SLOid);
            return System.Threading.Tasks.Task.FromResult(callInfo as ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
